name: Automation Pipeline
on: [push]

env:
  IMAGE_TAG: "xspfx/morgenkreis_dev:latest"

jobs:
  build_docker_image:
    env:
      IMAGE_TAG: "xspfx/morgenkreis_dev:latest"
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: xspfx
          password: ${{ secrets.PAT_2FA }}
      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_TAG }} -f ./docker/Dockerfile .
      - name: Push Docker image
        run: docker push ${{ env.IMAGE_TAG }}
      - name: Remove Docker image
        run: docker image rm ${{ env.IMAGE_TAG }}

  linting_pylint:
    runs-on: self-hosted
    needs: [build_docker_image]
    container:
      image: "xspfx/morgenkreis_dev:latest"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Linting
        run: uv run ./run_linting.sh

  linting_ruff:
    runs-on: self-hosted
    needs: [build_docker_image]
    container:
      image: "xspfx/morgenkreis_dev:latest"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Ruff Linting
        run: uvx ruff check

  type_checking_mypy:
    runs-on: self-hosted
    needs: [linting_ruff, linting_pylint]
    container:
      image: "xspfx/morgenkreis_dev:latest"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Type Checking
        run: uv run ./run_mypy.sh

  type_checking_pytype:
    runs-on: self-hosted
    needs: [linting_ruff, linting_pylint]
    container:
      image: "xspfx/morgenkreis_dev:latest"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Type Checking
        run: uv run ./run_pytype.sh

  pytest:
    runs-on: self-hosted
    needs: [type_checking_pytype, type_checking_mypy]
    container:
      image: "xspfx/morgenkreis_dev:latest"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fix Git Ownership Problems
        run: git config --global --add safe.directory /__w/playground.python/playground.python

      - name: Run Type Checking
        run: uv run ./run_pytest.sh

      - name: Surface failing tests
        if: always()
        uses: pmeier/pytest-results-action@main
        with:
          # A list of JUnit XML files, directories containing the former, and wildcard
          # patterns to process.
          # See @actions/glob for supported patterns.
          path: pytest_report.xml

          # (Optional) Add a summary of the results at the top of the report
          summary: true

          # (Optional) Select which results should be included in the report.
          # Follows the same syntax as `pytest -r`
          display-options: fEX

          # (Optional) Fail the workflow if no JUnit XML was found.
          fail-on-empty: true

          # (Optional) Title of the test results section in the workflow summary
          title: Test results

  robotframework_test:
    runs-on: self-hosted
    needs: [type_checking_pytype, type_checking_mypy]
    container:
      image: "xspfx/morgenkreis_dev:latest"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fix Git Ownership Problems
        run: git config --global --add safe.directory /__w/playground.python/playground.python

      - name: Run Type Checking
        run: uv run ./run_robot.sh
